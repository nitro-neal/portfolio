{"version":3,"sources":["webpack:///./src/components/Project/ProjectCardStyles.jsx","webpack:///./src/components/Project/ProjectCard.jsx","webpack:///./src/components/Project/ProjectList.jsx","webpack:///./src/pages/projects.jsx","webpack:///./src/components/Layout/SEO.jsx","webpack:///./src/components/Common/Container.jsx"],"names":["Card","styled","AniLink","withConfig","displayName","componentId","breakpoints","tablet","_ref","index","_ref2","Background","span","_ref3","color","Container","div","Copy","_ref4","client","colors","white","desktop","_ref5","Client","p","ImageWrapper","_ref6","_ref7","transitions","satanSnap","_ref8","Button","button","black","mediumSnap","_ref9","_ref10","ProjectCard","project","react_default","a","createElement","bg","to","slug","aria-label","title","cover","direction","gatsby_image_default","alt","fluid","featuredimage","childImageSharp","ProjectListContainer","Grid","ProjectList","allMarkdownRemark","_3248693193","data","style","animations","verticleSlide","edges","map","node","Project_ProjectCard","key","frontmatter","Experience","Fragment","SEO","Project_ProjectList","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","__webpack_require__","d","__webpack_exports__","ContentContainer","ContactContainer","styled_components__WEBPACK_IMPORTED_MODULE_0__","_shared_breakpoints__WEBPACK_IMPORTED_MODULE_1__","react_spring__WEBPACK_IMPORTED_MODULE_2__","_shared_colors__WEBPACK_IMPORTED_MODULE_3__","animated"],"mappings":"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","file":"component---src-pages-projects-jsx-403fb8b252cc1403479b.js","sourcesContent":["import styled from \"styled-components\";\r\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\";\r\nimport breakpoints from \"../../shared/breakpoints\";\r\nimport { transitions } from \"../../shared/transitions\";\r\nimport colors from \"../../shared/colors\";\r\n\r\nexport const Card = styled(AniLink)`\r\n  position: relative;\r\n  overflow: hidden;\r\n  padding-top: 100%;\r\n  grid-column: span 2;\r\n\r\n  ${breakpoints.tablet} {\r\n    padding-top: ${({ index }) => (index % 3 === 0 ? `50%` : `100%`)};\r\n\r\n    grid-column: ${({ index }) => (index % 3 === 0 ? `span 2` : `span 1`)};\r\n  }\r\n`;\r\n\r\nexport const Background = styled.span`\r\n  position: absolute;\r\n  z-index: -1;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: ${({ color }) => color};\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n\r\nexport const Copy = styled.div`\r\n  position: absolute;\r\n  z-index: 100;\r\n  left: 0;\r\n  top: 0;\r\n  padding: 2rem;\r\n\r\n  h2,\r\n  p {\r\n    font-size: 1.8rem;\r\n  }\r\n\r\n  color: ${({ client }) => (client === \"Binance\" ? `#02394A` : colors.white)};\r\n\r\n  ${breakpoints.desktop} {\r\n    padding: 4rem;\r\n    top: auto;\r\n    bottom: ${({ client }) => (client === \"Binance\" ? `auto` : `0`)};\r\n\r\n    h2 {\r\n      font-size: 4rem;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Client = styled.p`\r\n  font-weight: 200;\r\n  ${breakpoints.desktop} {\r\n    font-weight: 400;\r\n  }\r\n`;\r\n\r\nexport const ImageWrapper = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: ${({ index }) => (index % 3 === 0 ? `50%` : `100%`)};\r\n  height: ${({ index }) => (index % 3 === 0 ? `50%` : `100%`)};\r\n  overflow: hidden;\r\n  transform: scale(1);\r\n  ${transitions.satanSnap};\r\n  transform-origin: ${({ client }) => `50%`};\r\n\r\n  ${Card}:hover & {\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  ${Card}:focus & {\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  ${breakpoints.tablet} {\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  position: absolute;\r\n  right: 2rem;\r\n  bottom: 0;\r\n  padding: 1.5rem 4rem;\r\n  text-align: right;\r\n  color: ${colors.white};\r\n  background-color: ${colors.black};\r\n  transform: translateY(6rem);\r\n  ${transitions.mediumSnap};\r\n\r\n  ${Card}:hover & {\r\n    transform: translateY(0rem);\r\n  }\r\n  ${Card}:focus & {\r\n    transform: translateY(0rem);\r\n  }\r\n\r\n  ${breakpoints.desktop} {\r\n    right: 4rem;\r\n    bottom: ${({ client }) => (client === \"Binance\" ? `0` : `auto`)};\r\n\r\n    transform: ${({ client }) =>\r\n      client === \"Binance\" ? `translateY(6rem)` : `translateY(-6rem)`};\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Img from \"gatsby-image\";\r\nimport {\r\n  Card,\r\n  Copy,\r\n  Client,\r\n  Button,\r\n  ImageWrapper,\r\n  Container,\r\n  Background,\r\n} from \"./ProjectCardStyles\";\r\n\r\nconst ProjectCard = ({ project, index }) => {\r\n  return (\r\n    <Card\r\n      index={index + 1}\r\n      color={project.color}\r\n      bg={project.color}\r\n      to={`/projects${project.slug}`}\r\n      aria-label={`Read more about ${project.title}`}\r\n      cover\r\n      direction=\"right\"\r\n    >\r\n      <Container>\r\n        <Copy client={project.client}>\r\n          <Client color={project.color}>{project.client}</Client>\r\n          <h2>{project.title}</h2>\r\n        </Copy>\r\n        <ImageWrapper index={index + 1} client={project.client}>\r\n          <Img\r\n            alt={project.title}\r\n            fluid={project.featuredimage.childImageSharp.fluid}\r\n          />\r\n        </ImageWrapper>\r\n        <Button color={project.color} client={project.client}>\r\n          Read more\r\n        </Button>\r\n        <Background color={project.color} />\r\n      </Container>\r\n    </Card>\r\n  );\r\n};\r\n\r\nProjectCard.propTypes = {\r\n  project: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport styled from \"styled-components\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport { animations } from \"../../shared/transitions\";\r\nimport Container from \"../Common/Container\";\r\nimport breakpoints from \"../../shared/breakpoints\";\r\n\r\nconst ProjectList = () => {\r\n  const { allMarkdownRemark } = useStaticQuery(graphql`\r\n    query ProjectListing {\r\n      allMarkdownRemark(\r\n        sort: { order: ASC, fields: [frontmatter___date] }\r\n        filter: { fileAbsolutePath: { regex: \"/projects/\" } }\r\n      ) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              title\r\n              client\r\n              slug\r\n              color\r\n              outline\r\n              featuredimage {\r\n                childImageSharp {\r\n                  fluid(maxWidth: 1300, quality: 80) {\r\n                    ...GatsbyImageSharpFluid\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  return (\r\n    <ProjectListContainer style={animations.verticleSlide(`15rem`, 0)}>\r\n      <h1>Projects</h1>\r\n      <Grid>\r\n        {allMarkdownRemark.edges.map(({ node }, index) => (\r\n          <ProjectCard\r\n            index={index}\r\n            key={node.frontmatter.slug}\r\n            project={node.frontmatter}\r\n          />\r\n        ))}\r\n      </Grid>\r\n    </ProjectListContainer>\r\n  );\r\n};\r\n\r\nconst ProjectListContainer = styled(Container)`\r\n  margin-top: 30vh;\r\n  grid-row-gap: 0rem;\r\n\r\n  h1 {\r\n    position: relative;\r\n    z-index: 10000;\r\n    transform: translateY(1rem);\r\n\r\n    ${breakpoints.desktop} {\r\n      transform: translateY(2rem);\r\n      font-size: 8rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-gap: 1rem;\r\n`;\r\n\r\nexport default ProjectList;\r\n","import React from \"react\";\r\nimport SEO from \"../components/Layout/SEO\";\r\nimport ProjectList from \"../components/Project/ProjectList\";\r\n\r\nconst Experience = () => {\r\n  return (\r\n    <>\r\n      <SEO title=\"Projects\" />\r\n      <ProjectList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Experience;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  const metaDescription = description || site.siteMetadata.description;\r\n\r\n  return (\r\n    <>\r\n      <Helmet\r\n        htmlAttributes={{\r\n          lang,\r\n        }}\r\n        title={title}\r\n        titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n        meta={[\r\n          {\r\n            name: `description`,\r\n            content: metaDescription,\r\n          },\r\n          {\r\n            property: `og:title`,\r\n            content: title,\r\n          },\r\n          {\r\n            property: `og:description`,\r\n            content: metaDescription,\r\n          },\r\n          {\r\n            property: `og:type`,\r\n            content: `website`,\r\n          },\r\n          {\r\n            name: `twitter:card`,\r\n            content: `summary`,\r\n          },\r\n          {\r\n            name: `twitter:creator`,\r\n            content: site.siteMetadata.author,\r\n          },\r\n          {\r\n            name: `twitter:title`,\r\n            content: title,\r\n          },\r\n          {\r\n            name: `twitter:description`,\r\n            content: metaDescription,\r\n          },\r\n        ].concat(meta)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n};\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SEO;\r\n","import styled from \"styled-components\";\r\nimport breakpoints from \"../../shared/breakpoints\";\r\nimport { animated } from \"react-spring\";\r\nimport colors from \"../../shared/colors\";\r\n\r\nconst Container = styled(animated.div)`\r\n  position: relative;\r\n  grid-column: 2 / 12;\r\n  display: grid;\r\n  grid-row-gap: 8rem;\r\n  margin-bottom: 8rem;\r\n\r\n  ${breakpoints.tablet} {\r\n    grid-column: 3 / 11;\r\n  }\r\n`;\r\n\r\nexport const ContentContainer = styled(Container)`\r\n  grid-row-gap: 2rem;\r\n  margin-top: 30vh;\r\n\r\n  ${breakpoints.desktop} {\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-auto-rows: min-content;\r\n\r\n    .full {\r\n      grid-column: span 2;\r\n    }\r\n\r\n    h1,\r\n    .left {\r\n      grid-column: span 1;\r\n    }\r\n\r\n    article,\r\n    p,\r\n    .right {\r\n      grid-column-start: 2;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ContactContainer = styled.div`\r\n  position: relative;\r\n  grid-column: 1 / -1;\r\n  background-color: ${({ color }) => color};\r\n  color: ${({ client }) => (client === \"Binance\" ? `#02394A` : colors.white)};\r\n  display: grid;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  padding: calc(100vh / 6) 0;\r\n  box-shadow: inset 0 0 5rem rgba(0, 0, 0, 0.25);\r\n\r\n  div {\r\n    grid-column: 2 / 12;\r\n\r\n    ${breakpoints.tablet} {\r\n      grid-column: 3 / 11;\r\n    }\r\n\r\n    ${breakpoints.desktop} {\r\n      grid-column: 3 / 6;\r\n    }\r\n  }\r\n\r\n  form {\r\n    grid-column: 2 / 12;\r\n\r\n    ${breakpoints.tablet} {\r\n      grid-column: 3 / 11;\r\n    }\r\n\r\n    ${breakpoints.desktop} {\r\n      grid-column: 7 / 11;\r\n    }\r\n\r\n    input,\r\n    textarea {\r\n      border: ${({ client }) =>\r\n        client === \"Binance\" ? `0.1rem solid #02394A` : null};\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: ${({ client }) =>\r\n      client === \"Binance\" ? `#02394A` : colors.white} !important;\r\n  }\r\n\r\n  label {\r\n    p {\r\n      background-color: ${({ color }) => color};\r\n    }\r\n  }\r\n\r\n  button {\r\n    color: ${({ color }) => color};\r\n    background-color: ${({ client }) =>\r\n      client === \"Binance\" ? `#02394A` : colors.white};\r\n  }\r\n`;\r\n\r\nexport default Container;\r\n"],"sourceRoot":""}