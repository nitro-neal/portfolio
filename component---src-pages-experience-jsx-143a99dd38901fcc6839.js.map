{"version":3,"sources":["webpack:///./src/components/Experience/ExperienceCard.jsx","webpack:///./src/components/Experience/ExperienceList.jsx","webpack:///./src/pages/experience.jsx","webpack:///./src/components/Layout/SEO.jsx","webpack:///./src/components/Common/Container.jsx"],"names":["ExperienceCard","_ref","experience","from","split","join","to","react_default","a","createElement","Card","Company","title","ExperienceCard_Date","current","description","styled","article","withConfig","displayName","componentId","p","Date","div","colors","blue","ExperienceList","allMarkdownRemark","_2970535692","data","Container","style","animations","verticleSlide","ExperienceList_Card","edges","map","node","Experience_ExperienceCard","key","frontmatter","Experience","Fragment","SEO","Experience_ExperienceList","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","__webpack_require__","d","__webpack_exports__","ContentContainer","ContactContainer","styled_components__WEBPACK_IMPORTED_MODULE_0__","_shared_breakpoints__WEBPACK_IMPORTED_MODULE_1__","react_spring__WEBPACK_IMPORTED_MODULE_2__","_shared_colors__WEBPACK_IMPORTED_MODULE_3__","animated","breakpoints","tablet","desktop","color","_ref2","client","white","_ref3","_ref4","_ref5","_ref6","_ref7"],"mappings":"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","file":"component---src-pages-experience-jsx-143a99dd38901fcc6839.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ExperienceCard = ({ experience }) => {\r\n  const from = experience.from.split(\" \").join(\"/\");\r\n  const to = experience.to.split(\" \").join(\"/\");\r\n  return (\r\n    <Card>\r\n      <Company>{experience.title}</Company>\r\n      <Date>\r\n        {from} - {!experience.current ? to : \"Present\"}\r\n      </Date>\r\n      <p>{experience.description}</p>\r\n    </Card>\r\n  );\r\n};\r\n\r\nExperienceCard.propTypes = {\r\n  experience: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ExperienceCard;\r\n\r\nconst Card = styled.article`\r\n  position: relative;\r\n  padding: 2rem 0;\r\n`;\r\n\r\nconst Company = styled.p`\r\n  font-weight: 900;\r\n`;\r\n\r\nconst Date = styled.p`\r\n  opacity: 0.6;\r\n`;\r\n","import React from \"react\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport { ContentContainer } from \"../Common/Container\";\r\nimport ExperienceCard from \"./ExperienceCard\";\r\nimport { animations } from \"../../shared/transitions\";\r\nimport { FaFilePdf } from \"react-icons/fa\";\r\nimport styled from \"styled-components\";\r\nimport colors from \"../../shared/colors\";\r\n\r\nconst ExperienceList = () => {\r\n  const { allMarkdownRemark } = useStaticQuery(graphql`\r\n    query ExperienceListQuery {\r\n      allMarkdownRemark(\r\n        sort: { order: ASC, fields: [frontmatter___order] }\r\n        filter: { fileAbsolutePath: { regex: \"/experience/\" } }\r\n      ) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              order\r\n              title\r\n              to\r\n              from\r\n              current\r\n              role\r\n              description\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  return (\r\n    <ContentContainer style={animations.verticleSlide(`15rem`, 0)}>\r\n      <Card>\r\n        <h1>Experience</h1>\r\n        {/* <p>Download a copy of my CV below.</p>{\" \"}\r\n        <a\r\n          href=\"https://drive.google.com/open?\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Download CV <FaFilePdf />\r\n        </a> */}\r\n      </Card>\r\n      {allMarkdownRemark.edges.map(({ node }) => (\r\n        <ExperienceCard\r\n          key={node.frontmatter.title}\r\n          experience={node.frontmatter}\r\n        />\r\n      ))}\r\n    </ContentContainer>\r\n  );\r\n};\r\n\r\nconst Card = styled.div`\r\n  margin-bottom: 5rem;\r\n  h1 {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  p {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  a {\r\n    color: ${colors.blue};\r\n\r\n    svg {\r\n      transform: translate(0.75rem, 0.25rem);\r\n    }\r\n  }\r\n`;\r\n\r\nexport default ExperienceList;\r\n","import React from \"react\";\r\nimport SEO from \"../components/Layout/SEO\";\r\nimport ExperienceList from \"../components/Experience/ExperienceList\";\r\n\r\nconst Experience = () => {\r\n  return (\r\n    <>\r\n      <SEO title=\"Experience\" />\r\n      <ExperienceList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Experience;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  );\r\n\r\n  const metaDescription = description || site.siteMetadata.description;\r\n\r\n  return (\r\n    <>\r\n      <Helmet\r\n        htmlAttributes={{\r\n          lang,\r\n        }}\r\n        title={title}\r\n        titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n        meta={[\r\n          {\r\n            name: `description`,\r\n            content: metaDescription,\r\n          },\r\n          {\r\n            property: `og:title`,\r\n            content: title,\r\n          },\r\n          {\r\n            property: `og:description`,\r\n            content: metaDescription,\r\n          },\r\n          {\r\n            property: `og:type`,\r\n            content: `website`,\r\n          },\r\n          {\r\n            name: `twitter:card`,\r\n            content: `summary`,\r\n          },\r\n          {\r\n            name: `twitter:creator`,\r\n            content: site.siteMetadata.author,\r\n          },\r\n          {\r\n            name: `twitter:title`,\r\n            content: title,\r\n          },\r\n          {\r\n            name: `twitter:description`,\r\n            content: metaDescription,\r\n          },\r\n        ].concat(meta)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n};\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SEO;\r\n","import styled from \"styled-components\";\r\nimport breakpoints from \"../../shared/breakpoints\";\r\nimport { animated } from \"react-spring\";\r\nimport colors from \"../../shared/colors\";\r\n\r\nconst Container = styled(animated.div)`\r\n  position: relative;\r\n  grid-column: 2 / 12;\r\n  display: grid;\r\n  grid-row-gap: 8rem;\r\n  margin-bottom: 8rem;\r\n\r\n  ${breakpoints.tablet} {\r\n    grid-column: 3 / 11;\r\n  }\r\n`;\r\n\r\nexport const ContentContainer = styled(Container)`\r\n  grid-row-gap: 2rem;\r\n  margin-top: 30vh;\r\n\r\n  ${breakpoints.desktop} {\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-auto-rows: min-content;\r\n\r\n    .full {\r\n      grid-column: span 2;\r\n    }\r\n\r\n    h1,\r\n    .left {\r\n      grid-column: span 1;\r\n    }\r\n\r\n    article,\r\n    p,\r\n    .right {\r\n      grid-column-start: 2;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ContactContainer = styled.div`\r\n  position: relative;\r\n  grid-column: 1 / -1;\r\n  background-color: ${({ color }) => color};\r\n  color: ${({ client }) => (client === \"Binance\" ? `#02394A` : colors.white)};\r\n  display: grid;\r\n  grid-template-columns: repeat(12, 1fr);\r\n  padding: calc(100vh / 6) 0;\r\n  box-shadow: inset 0 0 5rem rgba(0, 0, 0, 0.25);\r\n\r\n  div {\r\n    grid-column: 2 / 12;\r\n\r\n    ${breakpoints.tablet} {\r\n      grid-column: 3 / 11;\r\n    }\r\n\r\n    ${breakpoints.desktop} {\r\n      grid-column: 3 / 6;\r\n    }\r\n  }\r\n\r\n  form {\r\n    grid-column: 2 / 12;\r\n\r\n    ${breakpoints.tablet} {\r\n      grid-column: 3 / 11;\r\n    }\r\n\r\n    ${breakpoints.desktop} {\r\n      grid-column: 7 / 11;\r\n    }\r\n\r\n    input,\r\n    textarea {\r\n      border: ${({ client }) =>\r\n        client === \"Binance\" ? `0.1rem solid #02394A` : null};\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: ${({ client }) =>\r\n      client === \"Binance\" ? `#02394A` : colors.white} !important;\r\n  }\r\n\r\n  label {\r\n    p {\r\n      background-color: ${({ color }) => color};\r\n    }\r\n  }\r\n\r\n  button {\r\n    color: ${({ color }) => color};\r\n    background-color: ${({ client }) =>\r\n      client === \"Binance\" ? `#02394A` : colors.white};\r\n  }\r\n`;\r\n\r\nexport default Container;\r\n"],"sourceRoot":""}